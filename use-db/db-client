#! /usr/bin/env bash

set -eu

pids_dir="$PWD/nix/pids/db-client"
log_dir="$PWD/nix/log"

add_client() {
    mkdir -p "$pids_dir" && touch "$pids_dir/$PPID"
    add_postgres
}

add_postgres() {
    # Spin up a postgres server iff PGHOST is a Unix-domain socket.
    # Otherwise, assume the host is already up and running.
    [ "${PGHOST:0:1}" = "/" ] || return 0

    if [ -d "$PGDATA" ]
    then
        start_postgres
    else
        pg_ctl initdb --silent -o '--auth=trust'
        start_postgres && createdb $PGDATABASE
    fi
}

start_postgres() {
    if postgres_is_stopped
    then
        # We'll use a Unix-domain socket we control, and avoid listening for
        # TCP connections. This prevents conflicts with any other postgres
        # server the host is running, even if it's listening on the same port.
        local logfile="${log_dir}/pg.log"
        mkdir -p "$PGHOST" "${logfile%/*}"
        (set -m
        pg_ctl start --silent -w --log "$logfile" -o "-k $PGHOST -h ''")
    fi
}

postgres_is_stopped() {
    pg_isready --quiet
    (( $? == 2 ))
}

remove_client() {
    rm "$pids_dir/$PPID"

    if [ -n "$(find "$pids_dir" -prune -empty)" ]
    then
        stop_postgres
    fi
}

stop_postgres() {
    # Shut down the postgres server iff PGHOST is a Unix-domain socket.
    # Otherwise, it's being managed by some other host/process.
    [ "${PGHOST:0:1}" = "/" ] || return 0

    pg_isready --quiet || return 0
    pg_ctl stop --silent -W -m smart
}

case "$1" in
    add)
        add_client ;;
    remove)
        remove_client ;;
    *)
        echo "Usage: ${BASH_SOURCE[0]##*/} {add | remove}"
        exit 1 ;;
esac
